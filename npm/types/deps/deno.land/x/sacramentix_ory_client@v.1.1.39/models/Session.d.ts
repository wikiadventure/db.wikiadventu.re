/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AuthenticatorAssuranceLevel } from './AuthenticatorAssuranceLevel.js';
import { Identity } from './Identity.js';
import { SessionAuthenticationMethod } from './SessionAuthenticationMethod.js';
import { SessionDevice } from './SessionDevice.js';
/**
* A Session
*/
export declare class Session {
    /**
    * Active state. If false the session is no longer active.
    */
    'active'?: boolean;
    /**
    * The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
    */
    'authenticated_at'?: Date;
    /**
    * A list of authenticators which were used to authenticate the session.
    */
    'authentication_methods'?: Array<SessionAuthenticationMethod>;
    'authenticator_assurance_level'?: AuthenticatorAssuranceLevel;
    /**
    * Devices has history of all endpoints where the session was used
    */
    'devices'?: Array<SessionDevice>;
    /**
    * The Session Expiry  When this session expires at.
    */
    'expires_at'?: Date;
    /**
    * Session ID
    */
    'id': string;
    'identity': Identity;
    /**
    * The Session Issuance Timestamp  When this session was issued at. Usually equal or close to `authenticated_at`.
    */
    'issued_at'?: Date;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
