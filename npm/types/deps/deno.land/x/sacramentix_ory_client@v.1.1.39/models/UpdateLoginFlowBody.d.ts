/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers.
 *
 * OpenAPI spec version: v1.1.39
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare class UpdateLoginFlowBody {
    /**
    * Sending the anti-csrf token is only required for browser login flows.
    */
    'csrf_token'?: string;
    /**
    * Identifier is the email or username of the user trying to log in.
    */
    'identifier': string;
    /**
    * Method should be set to \"lookup_secret\" when logging in using the lookup_secret strategy.
    */
    'method': string;
    /**
    * The user\'s password.
    */
    'password': string;
    /**
    * Identifier is the email or username of the user trying to log in. This field is deprecated!
    */
    'password_identifier'?: string;
    /**
    * The provider to register with
    */
    'provider': string;
    /**
    * The identity traits. This is a placeholder for the registration flow.
    */
    'traits'?: any;
    /**
    * UpstreamParameters are the parameters that are passed to the upstream identity provider.  These parameters are optional and depend on what the upstream identity provider supports. Supported parameters are: `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session. `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`. `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
    */
    'upstream_parameters'?: any;
    /**
    * The TOTP code.
    */
    'totp_code': string;
    /**
    * Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
    */
    'webauthn_login'?: string;
    /**
    * The lookup secret.
    */
    'lookup_secret': string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
